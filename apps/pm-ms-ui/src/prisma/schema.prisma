generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = "postgres://avnadmin:AVNS_9RN-e5v5pglX_B8YSAY@cmu-cs-447-dangnhatminh09032002-e210.b.aivencloud.com:20746/defaultdb?sslmode=require"
}

model User {
    id         String  @id @default(cuid())
    email      String  @unique
    name       String
    password   String
    avatar     String?
    role       Role    @default(MEMBER)
    department String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    projectsLead   Project[]       @relation("ProjectLead")
    projectMembers ProjectMember[]
    issuesAssigned Issue[]         @relation("IssueAssignee")
    issuesReported Issue[]         @relation("IssueReporter")
    comments       Comment[]
    attachments    Attachment[]

    @@map("users")
}

model Project {
    id          String        @id @default(cuid())
    name        String
    key         String        @unique
    description String?
    type        ProjectType   @default(SOFTWARE)
    category    String
    url         String?
    avatar      String?
    status      ProjectStatus @default(ACTIVE)

    leadId String
    lead   User   @relation("ProjectLead", fields: [leadId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    members ProjectMember[]
    issues  Issue[]
    sprints Sprint[]

    @@map("projects")
}

model ProjectMember {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    role     Role     @default(MEMBER)
    joinedAt DateTime @default(now())

    @@unique([userId, projectId])
    @@map("project_members")
}

model Issue {
    id          String      @id @default(cuid())
    key         String      @unique
    title       String
    description String?
    type        IssueType   @default(TASK)
    status      IssueStatus @default(TO_DO)
    priority    Priority    @default(MEDIUM)

    assigneeId String?
    assignee   User?   @relation("IssueAssignee", fields: [assigneeId], references: [id])

    reporterId String
    reporter   User   @relation("IssueReporter", fields: [reporterId], references: [id])

    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    sprintId String?
    sprint   Sprint? @relation(fields: [sprintId], references: [id])

    parentId String?
    parent   Issue?  @relation("IssueParent", fields: [parentId], references: [id])
    children Issue[] @relation("IssueParent")

    storyPoints   Int?
    estimatedTime Int? // in hours
    loggedTime    Int? // in hours
    dueDate       DateTime?

    labels      String[]
    components  String[]
    fixVersions String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    comments    Comment[]
    attachments Attachment[]

    @@map("issues")
}

model Sprint {
    id        String       @id @default(cuid())
    name      String
    goal      String?
    startDate DateTime
    endDate   DateTime
    status    SprintStatus @default(PLANNED)

    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    issues Issue[]

    @@map("sprints")
}

model Comment {
    id      String @id @default(cuid())
    content String

    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    issueId String
    issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("comments")
}

model Attachment {
    id   String @id @default(cuid())
    name String
    url  String
    size Int
    type String

    uploadedById String
    uploadedBy   User   @relation(fields: [uploadedById], references: [id])

    issueId String
    issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

    uploadedAt DateTime @default(now())

    @@map("attachments")
}

// Enums
enum Role {
    ADMIN
    MEMBER
    VIEWER
}

enum ProjectType {
    SOFTWARE
    BUSINESS
    SERVICE_DESK
}

enum ProjectStatus {
    ACTIVE
    ARCHIVED
}

enum IssueType {
    TASK
    STORY
    BUG
    EPIC
    SUBTASK
}

enum IssueStatus {
    TO_DO
    IN_PROGRESS
    IN_REVIEW
    DONE
}

enum Priority {
    HIGHEST
    HIGH
    MEDIUM
    LOW
    LOWEST
}

enum SprintStatus {
    PLANNED
    ACTIVE
    COMPLETED
}
