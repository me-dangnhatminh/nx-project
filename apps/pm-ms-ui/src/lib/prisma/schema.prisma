// pnpm prisma db push --schema=apps/pm-ms-ui/src/lib/prisma/schema.prisma --force-reset

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = "postgres://avnadmin:AVNS_9RN-e5v5pglX_B8YSAY@cmu-cs-447-dangnhatminh09032002-e210.b.aivencloud.com:20746/defaultdb?sslmode=require"
}

model ImageRef {
    id       String @id @default(cuid())
    fileName String
    mimeType String
    size     Int
    imgOID   Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    users User[] @relation("UserAvatar")

    @@map("avatars")
}

model User {
    id         String  @id @default(cuid())
    email      String  @unique
    credential String
    firstName  String
    lastName   String
    avatarId   String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    avatar         ImageRef?    @relation("UserAvatar", fields: [avatarId], references: [id])
    memberships    Membership[] @relation("UserMemberships")
    issuesCreated  Issue[]      @relation("IssueCreator")
    issuesReported Issue[]      @relation("IssueReporter")
    issuesAssigned Issue[]      @relation("IssueAssignee")
    issuesArchived Issue[]      @relation("IssueArchivedBy")

    @@map("users")
}

model Group {
    id          String  @id @default(cuid())
    groupName   String
    description String?

    memberships Membership[] @relation("GroupMemberships")

    @@map("groups")
}

model Membership {
    id      String @id @default(cuid())
    userId  String
    groupId String

    user  User  @relation("UserMemberships", fields: [userId], references: [id], onDelete: Cascade)
    group Group @relation("GroupMemberships", fields: [groupId], references: [id], onDelete: Cascade)

    @@map("memberships")
}

enum ActorType {
    USER
    // GROUP -- Chưa sử dụng
}

model ProjectRoleActor {
    id          String      @id @default(cuid())
    projectId   String
    projectRole ProjectRole
    roleType    ActorType
    roleParam   String // ID của user hoặc group

    @@map("project_role_actors")
}

enum ProjectRole {
    ADMIN
    MEMBER
    VIEWER
}

// ========================== Permissions =========================
enum PermissionKey {
    BROWSE_PROJECTS
    ADMIN_PROJECTS
    EDIT_ISSUES
    CREATE_ISSUES
    ASSIGN_ISSUES
    RESOLVE_ISSUES
}

enum PermissionType {
    PROJECT_ROLE
    // USER
    // GROUP
}

model PermissionSchema {
    id   String @id @default(cuid())
    name String

    permissions SchemaPermission[]
    projects    Project[]

    @@map("permission_schemes")
}

model SchemaPermission {
    id         String         @id @default(cuid())
    permission PermissionKey
    permType   PermissionType
    permParam  String // e.g user ID, group ID, project role ID
    schemaId   String

    schema PermissionSchema @relation(fields: [schemaId], references: [id], onDelete: Cascade)

    @@map("schema_permissions")
}

// =========================================================
enum ProjectType {
    SOFTWARE
    MARKETING
    RESEARCH
    DESIGN
    OTHER
}

model Project {
    id                 String      @id @default(cuid())
    key                String
    name               String
    url                String?
    leadId             String
    description        String?
    type               ProjectType
    avatarId           String?
    permissionSchemaId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    permissionSchema PermissionSchema @relation(fields: [permissionSchemaId], references: [id], onDelete: Cascade)
    issues           Issue[]          @relation("ProjectIssues")
    // lead    ProjectMember   @relation("ProjectLead", fields: [leadId], references: [id])
    statuses         IssueStatus[]    @relation("ProjectIssueStatus")
    types            IssueType[]      @relation("ProjectIssueType")
    priorities       IssuePriority[]  @relation("ProjectIssuePriority")

    @@map("projects")
}

model Issue {
    id           String  @id @default(cuid())
    key          String
    summary      String
    description  String?
    typeId       String
    statusId     String
    priorityId   String
    resolutionId String?
    projectId    String
    creatorId    String
    reporterId   String?
    assigneeId   String?

    rank String // Lexorank for ordering issues, move outside in future

    dueDate    DateTime?
    resolvedAt DateTime?
    archived   Boolean   @default(false)
    archivedAt DateTime?
    archivedBy String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    project      Project       @relation("ProjectIssues", fields: [projectId], references: [id])
    creator      User          @relation("IssueCreator", fields: [creatorId], references: [id])
    reporter     User?         @relation("IssueReporter", fields: [reporterId], references: [id])
    assignee     User?         @relation("IssueAssignee", fields: [assigneeId], references: [id])
    archivedUser User?         @relation("IssueArchivedBy", fields: [archivedBy], references: [id])
    type         IssueType     @relation("IssueType", fields: [typeId], references: [id])
    status       IssueStatus   @relation("IssueStatus", fields: [statusId], references: [id])
    priority     IssuePriority @relation("IssuePriority", fields: [priorityId], references: [id])
    resolution   Resolution?   @relation("Resolution", fields: [resolutionId], references: [id])

    @@map("issues")
}

model IssueType {
    id          String  @id @default(cuid())
    sequence    Int     @default(0) // Used for ordering issue types
    name        String
    description String?
    iconURL     String? // URL to an icon representing the issue type
    avatarId    String?
    color       String? // Color code for the issue type, e.g., #FF5733

    projectId String // optimize in the future

    issue   Issue[] @relation("IssueType")
    project Project @relation("ProjectIssueType", fields: [projectId], references: [id], onDelete: Cascade)

    @@map("issue_types")
}

model IssueStatus {
    id          String  @id @default(cuid())
    sequence    Int     @default(0)
    name        String
    description String?
    iconURL     String?
    color       String?
    avatarId    String?

    projectId String // optimize in the future

    issue   Issue[] @relation("IssueStatus")
    project Project @relation("ProjectIssueStatus", fields: [projectId], references: [id], onDelete: Cascade)

    @@map("issue_statuses")
}

model IssuePriority {
    id          String  @id @default(cuid())
    sequence    Int     @default(0)
    name        String  @unique
    description String?
    iconURL     String?
    color       String?

    projectId String

    issue   Issue[] @relation("IssuePriority")
    project Project @relation("ProjectIssuePriority", fields: [projectId], references: [id], onDelete: Cascade)

    @@map("priorities")
}

model Resolution {
    id          String  @id @default(cuid())
    sequence    Int     @default(0) // Used for ordering resolutions
    name        String  @unique
    description String?
    iconURL     String? // URL to an icon representing the resolution

    issue Issue[] @relation("Resolution")

    @@map("resolutions")
}

// Chuyển qua thuật toán Lexorank để tối ưu sắp xếp
