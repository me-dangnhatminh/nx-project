// pnpm prisma db push --schema=apps/pm-ms-ui/src/lib/prisma/v2.schema.prisma --force-reset

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = "postgres://avnadmin:AVNS_9RN-e5v5pglX_B8YSAY@cmu-cs-447-dangnhatminh09032002-e210.b.aivencloud.com:20746/defaultdb?sslmode=require"
}

model ImageRef {
    id       String @id @default(cuid())
    fileName String
    mimeType String
    size     Int
    imgOID   Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    users User[] @relation("UserAvatar")

    @@map("avatars")
}

model User {
    id         String  @id @default(cuid())
    email      String  @unique
    credential String
    firstName  String
    lastName   String
    avatarId   String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    avatar         ImageRef?    @relation("UserAvatar", fields: [avatarId], references: [id])
    memberships    Membership[] @relation("UserMemberships")
    issuesCreated  Issue[]      @relation("IssueCreator")
    issuesReported Issue[]      @relation("IssueReporter")
    issuesAssigned Issue[]      @relation("IssueAssignee")
    issuesArchived Issue[]      @relation("IssueArchivedBy")

    @@map("users")
}

model Group {
    id          String  @id @default(cuid())
    groupName   String
    description String?

    memberships Membership[] @relation("GroupMemberships")

    @@map("groups")
}

model Membership {
    id      String @id @default(cuid())
    userId  String
    groupId String

    user  User  @relation("UserMemberships", fields: [userId], references: [id])
    group Group @relation("GroupMemberships", fields: [groupId], references: [id])

    @@map("memberships")
}

enum ActorType {
    USER
    GROUP
}

model ProjectRoleActor {
    id          String      @id @default(cuid())
    projectId   String
    projectRole ProjectRole
    roleType    ActorType
    roleParam   String // ID của user hoặc group

    @@map("project_role_actors")
}

enum ProjectRole {
    ADMIN
    MEMBER
    VIEWER
}

// ========================== Permissions =========================
enum PermissionKey {
    BROWSE_PROJECTS
    ADMIN_PROJECTS
    EDIT_ISSUES
    CREATE_ISSUES
    ASSIGN_ISSUES
    RESOLVE_ISSUES
}

model PermissionSchema {
    id   String @id @default(cuid())
    name String

    permissions SchemaPermission[]
    projects    Project[]

    @@map("permission_schemes")
}

model SchemaPermission {
    id         String        @id @default(cuid())
    permission PermissionKey
    permType   String // e.g 'user', 'group', 'project_role'
    permParam  String // e.g user ID, group ID, project role ID
    schemaId   String

    schema PermissionSchema @relation(fields: [schemaId], references: [id])

    @@map("schema_permissions")
}

// =========================================================
model Project {
    id                 String  @id @default(cuid())
    key                String
    name               String
    url                String?
    leadId             String
    description        String
    type               String
    category           String
    avatarId           String?
    permissionSchemaId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    permissionSchema PermissionSchema @relation(fields: [permissionSchemaId], references: [id])
    // lead    ProjectMember   @relation("ProjectLead", fields: [leadId], references: [id])
    issues           Issue[]          @relation("ProjectIssues")

    @@map("projects")
}

model Issue {
    id           String  @id @default(cuid())
    key          String
    summary      String
    description  String?
    typeId       String
    statusId     String
    priorityId   String
    resolutionId String?
    projectId    String
    creatorId    String
    reporterId   String?
    assigneeId   String?

    dueDate    DateTime?
    resolvedAt DateTime?
    archived   Boolean   @default(false)
    archivedAt DateTime?
    archivedBy String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    project      Project     @relation("ProjectIssues", fields: [projectId], references: [id])
    creator      User        @relation("IssueCreator", fields: [creatorId], references: [id])
    reporter     User?       @relation("IssueReporter", fields: [reporterId], references: [id])
    assignee     User?       @relation("IssueAssignee", fields: [assigneeId], references: [id])
    archivedUser User?       @relation("IssueArchivedBy", fields: [archivedBy], references: [id])
    type         IssueType   @relation("IssueType", fields: [typeId], references: [id])
    status       IssueStatus @relation("IssueStatus", fields: [statusId], references: [id])
    priority     Priority    @relation("IssuePriority", fields: [priorityId], references: [id])
    resolution   Resolution? @relation("Resolution", fields: [resolutionId], references: [id])

    @@map("issues")
}

model IssueType {
    id          String  @id @default(cuid())
    sequence    Int     @default(0) // Used for ordering issue types
    name        String
    description String?
    iconURL     String? // URL to an icon representing the issue type
    avatarId    String?

    issue Issue[] @relation("IssueType")

    @@map("issue_types")
}

model IssueStatus {
    id          String  @id @default(cuid())
    sequence    Int     @default(0)
    name        String
    description String?
    iconURL     String?
    color       String?
    avatarId    String?

    issue Issue[] @relation("IssueStatus")

    @@map("issue_statuses")
}

model Priority {
    id          String  @id @default(cuid())
    sequence    Int     @default(0) // Used for ordering priorities
    name        String  @unique
    description String?
    iconURL     String? // URL to an icon representing the priority
    color       String? // Hex color code for priority representation

    issue Issue[] @relation("IssuePriority")

    @@map("priorities")
}

model Resolution {
    id          String  @id @default(cuid())
    sequence    Int     @default(0) // Used for ordering resolutions
    name        String  @unique
    description String?
    iconURL     String? // URL to an icon representing the resolution

    issue Issue[] @relation("Resolution")

    @@map("resolutions")
}
